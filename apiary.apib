FORMAT: X-1A

HOST: https://co2.eaternity.ch/api/

# Eaternity API
The Eaternity API is a Web Service that calculates the CO2-footprint of recipes and restaurants dynamically and provides a CO2-indicator for ingredients. It includes daily changing information on origin, 
seasonality and other factors in the calculation. It further delivers CO2-reports with sophisticated and easy to understand statistics, graphs and analysis. 

The Eaternity API is a [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) interface, providing programmatic access to Eaternity’s calculation algorithms, indicator systems and data collections. It provides 
predictable URLs for accessing resources, and uses built-in HTTP features to receive commands (GET, POST, PUT, DELETE) and return responses.

## Authentication 
Each client gets his own unique API key, which he needs to provide to be able to talk to the Eaternity API.

To authenticate a request, clients should use the widely supported HTTPS Basic Authentication and pass the API key as the username, and an empty password. Note that the API only accepts secure connections via **HTTPS** with SNI (Server Name Indication). Servername is `co2.eaternity.ch`. Most HTTP request utilities and libraries that allow to specify a username and password will handle proper encoding of the header for you.

API Key Example: FmZ23.M4mTKmDA4ssFCkEnYi


## CO₂-Values
The CO₂-Values are given in the following unit for the different resources.

- Recipes: 
    - With a date: [g CO₂e(quivalent) / serving]
    - Without a date: Rating [A,B,C,D,E]. A is best, E is worst.
- Ingredients: 
    - Rating [A,B,C,D,E]. A is best, E is worst.
    - Bar Chart [0% - 100%]. How much this ingredient contributes to the total CO₂-Value of the recipe or the supply in percent.

## Language
The API is designed such that one request may contain information about an object (e.g. a recipe or a supply) in multiple languages.
Every JSON field which is subject to localization has a language array as value. One language object looks like this: 

`{
    "language": "de",
    "value": "Kürbisrisotto"
}`

Example of recipe title language array:

`"titles": [
{
    "language": "de",
    "value": "Kürbisrisotto"
},
{
    "language": "en",
    "value": "Pumpkin Risotto"
}]`

The language field must contain one of the [ISO 639-1](http://www.loc.gov/standards/iso639-2/php/code_list.php) alpha-2 codes.


#### ID Generation
The ID's of recipes, kitchens and supplies can be generated in two different ways. First possibility is to create a new resource through a `POST` to the API, then the ID is generated by Eaternity. 
The second possibility is to create a new resource through a `PUT`, providing your id in the URL itself (e.g. /recipes/298734), then your id is used on our servers.
The id can be an alphanumeric value following this regular expression: [-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|] (the allowed characters for a HTTP URL).

#### Notes On The Format
The API accepts JSON in requests. It returns JSON in all of its responses, including errors. Only the UTF-8 character encoding is supported for both requests and responses.

## Server Responses
A successful request will be prompted with either `200 - success` or `204 - No Content`.

Sadly, sometimes requests to the API are not successful. Failures can occur for a wide range of reasons. In all cases, the API should return an HTTP Status Code that indicates the nature of the failure (below), with a response body in JSON format containing additional information.

* 200   `Success` - If a resource was requested, it will be available at the top level of the response body.
* 201   `Created` -  The request was successful and a resource was created. The Location Header field indicates the URI the resource can be found.
* 204   `No Content` - The request was successful and the body intentionally contains no data.

* 400   `Invalid request` - This occurs when the request was not sent according to the documentation. Can be either the JSON format or the content. Check the documentation and the syntax of your request and try again.
* 401   `No authorization` - A valid API key was not provided with the request, so the API could not associate a client with the request.
* 403   `Forbidden` - The Kitchen is not authorized for calculating CO₂- values of recipes. Only kitchens which paid for the "Eaternity Membership" status are allowed to do so. Please contact Eaternity to get an up-to-date pricing for the Membership Status.
* 404   `Not found` - Either the request method and path supplied do not specify a known action in the API, or the object specified by the request does not exist.
* 405   `Method not allowed` - When the resource exists but the HTTP method verb is not allowed on this resource.

* 500   `Server error` - Just try again.

* 601   `Manual matching missing` - An ingredient was requested, whose ID is not yet manually matched into the Eaternity database. Retry once a day.
* 602   `No automatic match found` - At least one ingredient name could not get automatically matched into the Eaternity database. Try with a different name.
* 610   `Missing required property` - A required resource property was not filled in the request. Please provide the required field.
* 611   `Wrong property value` - A resource property was not provided according to the documentation. Either the given format is wrong or the value doesn't match to the given options. Usually not dependant on the implementation but on the user input. 

# Group Recipe Resources

The CO₂-values are given in **g CO₂e** for the recipe resource.

Provide the parameter `transient=true` in the URL if the recipe should not be considered for later statistics and reports. The resource will not be permenantly stored on our servers, no id is returned (Defaults to false).

Information on the estimations taken (and other comments) are given in the `info-text` property of the recipe. Please display this information next to the CO2-value in your interface.


##Recipe Properties

| Property | Type  | Description      | Required |
|:----------|:--------|:------------------|----------|
|titles| list of language object| title of the recipe in different languages (array of language objects)|no|
|author|string|original author of the recipe|no|
|date|yyyy-mm-dd|the date the recipe is served. If **no date** is provided, **only a rating** of the recipe is returned.|best practice|
|location|string|location where the recipe is cooked. Address or country (arbitrary format) |yes if recipe is not provided in a kitchen|
|servings|int|for how many servings the ingredients are given. Required for the evaluation of the Eaternity Award.|yes for the Eaternity Award|
|instructions|list of language objects|cooking instructions for the recipe in different languages (array of language objects)|   no|
|ingredients|list of ingredients|a list of all ingredient resources in this recipe |yes|
|**Response**||||
|id|string|the id of the recipe. Either generated by Eaternity or supplied by the client through a PUT||
|kitchen-id|string|the id of the kitchen the recipe belongs to.||
|co2-value|int|the CO₂-Value of the whole recipe per serving in [g CO₂e / serving]. If no date is provided, no CO₂-Value but only the rating is returned. If no servings are given, we assume 1 serving.||
|info-text| string | notes on the calculated recipe CO₂-value, e.g. remarks when properties like origin or transport are missing. (max. 500 characters)||
|eaternity-award|boolean|true if the CO₂-Value of the recipe is climate friendly, false otherwise | |
|rating|string|the CO₂-recipe rating [A,B,C,D,E]. A is best, E is worst.| .|

##Ingredient Properties
| Property | Type  | Description    | Required |
|:----------|:--------|:------------------|:----------|
|id|string| your id of the ingredient. If no id is provided, the automatic product matching kicks in.|no|
|names|list of language object|full name of ingredient in different languages (array of language objects). Name in at least one language required.|yes|
|amount|float|amount of the ingredient in the specified unit|yes|
|unit|string|unit of the given amount of the ingredient: *gram* or *liter*, default: *gram*|no|
|origin|string|origin of the ingredient: postal address or country |best practice|
|transport|string|means of transport from ”origin” to ”location” of recipe or kitchen. Values: *air* or *ground*|best practice|
|production|string|production of the base material. Values: *standard*, *greenhouse*, *organic*, *fair-trade*, *farm* (fishes and game animals only), *wild-caught* (fishes and game animals only), *sustainable-fish*. |best practice|
|producer|string|the producer or brand of the product. Especially important for combined products (products with multiple ingredients)|best practice|
|processing| string| processing and convenience. Values: *raw*. Meat and Fisch: *unboned* or *boned*. Fisch: *skinned*, *beheaded*, *fillet*. Vegetables and Fruits: *cut*, *boiled*, *peeled*. |no|
|conservation| string| conservation for longer storage life. Values: *fresh* or *frozen* or *dried* or *conserved* or *canned* or *boiled-down* |best practice|
|packaging| string| how the product is packaged. Values:  *none*, *plastic*, *paper*, *pet*, *tin*, *alu*, *glas*, *cardboard*, *tetra* |no|
|gtin|integer|global trade item number: [www.gtin.info](http://www.gtin.info/)|no|
|**Response**| | | |
|rating|string|the CO₂-ingredient rating [A,B,C,D,E]. A is best, E is worst.||
|bar-chart|float|to generate a bar chart for all ingredients of a recipe. How much this ingredient contributes to the total CO₂-value of the recipe in percent (0.00% - 100.00%)|.|

The parameters of the properties origin, transport, production, processing, conservation and packaging can be set to multiple values, provide them in a comma seperated list.
`"production": "organic, fair-trade, Max Havelaar"`

The more properties are provided the more accurate are the CO₂ values. More options will be added over time. 
Missing properties are estimated.

## Recipe Collection [/recipes]

### Create a recipe [POST]
Create a recipe resource and receive the CO₂-Value and Eaternity Award. Example of a full request with all fields used.

+ Request (application/json)

        {   
            "recipe": {
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    },
                    {
                        "language": "en",
                        "value": "Pumpkin Risotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        },
                        {
                            "language": "en",
                            "value": "Bake the carrot cake in the oven and enjoy as still hot."
                        }],
                "ingredients": [
                    {
                    "id": "100100191",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        },
                        {
                            "language": "en",
                            "value": "Tomatoes"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic",  
                    "gtin": 00012345678905
                    },
                    {
                    "id": "100100894",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        },
                        {
                            "language": "en",
                            "value": "Onions"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": "",  
                    "gtin": 00012345678906
                    }
                ]
            }
        }

+ Response 200 (application/json)

    + Headers
    
            Location: https://co2.eaternity.ch/api/recipes/d1ed2263-b1b2-4f50-9e9d-ba62cae81f29
            
    + Body
    
            {
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B"
                }   
            }


## Recipe [/recipes/{id}]
            
            
### Get Recipe [GET]
Get the up-to-date CO2-Value for this recipe for the current date

+ Response 200 (application/json)

        {   
            "recipe": {
                "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                "co2-value": 765,
                "info-text": "Two ingredient origins have been estimated.",
                "eaternity-award": false,
                "rating": "B",
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    },
                    {
                        "language": "en",
                        "value": "Pumpkin Risotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                    {
                        "language": "de",
                        "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                    },
                    {
                        "language": "en",
                        "value": "Bake the carrot cake in the oven and enjoy as still hot."
                    }],
                "ingredients": [
                    {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        },
                        {
                            "language": "en",
                            "value": "Tomatoes"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic",  
                    "rating": "B",
                    "bar-chart": 31.00
                    },
                    {
                    "id": "100100894",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        },
                        {
                            "language": "en",
                            "value": "Onions"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": "",  
                    "rating": "C",
                    "bar-chart": 69.00
                    }
                ]
            }
        }

### Update or create new recipe [PUT]
Update or create a certain recipe with this id. The whole recipe resource with all ingredients must be provided again. (PUT overrides the existing resource).
  
+ Request (application/json)

        {   
            "recipe": {
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        },
                        {
                            "language": "en",
                            "value": "Bake the carrot cake in the oven and enjoy as still hot."
                        }],
                "ingredients": [
                    {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"  
                    },
                    {
                    "id": "100100894",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": ""
                    }
                ]
            }
        }

+ Response 200 (application/json)

            {
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B"
                }   
            }
            
            
### Delete the recipe [DELETE]
Deletes this recipe from the server

+ Response 204

## Kitchen Recipe Collection [/kitchens/{kitchen_id}/recipes]
No recipe location needs to be provided.

### Post a recipe [POST]
Create a recipe resource in a specific kitchen and receive the CO₂-Value and Eaternity Award 

+ Request (application/json)

        {   
            "recipe": {
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        },
                        {
                            "language": "en",
                            "value": "Bake the carrot cake in the oven and enjoy as still hot."
                        }],
                "ingredients": [
                    {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                    },
                    {
                    "id": "100100894",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": ""
                    }
                ]
            }
        }

+ Response 200 (application/json)

    + Headers

            Location: https://co2.eaternity.ch/api/kitchens/45674/recipes/d1ed2263-b1b2-4f50-9e9d-ba62cae81f29

    + Body

            {
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "kitchen-id": "45674",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B"
                }   
            }
            
            
### Get all recipes contained in this kitchen [GET]
A list of recipe ids is returned.

+ Response 200 (application/json)

        {
            "recipes": [ "298374","298345","298454","298345","298456","294564" ]
        }

## Kitchen Recipe [/kitchens/{kitchen_id}/recipes/{recipe_id}]

### Get Recipe [GET]
Get the up-to-date CO2-Value for this recipe for the current date

+ Response 200 (application/json)

        {   
            "recipe": {
                "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                "kitchen-id": "45674",
                "co2-value": 765,
                "info-text": "Two ingredient origins have been estimated.",
                "eaternity-award": false,
                "rating": "B",
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        },
                        {
                            "language": "en",
                            "value": "Bake the carrot cake in the oven and enjoy as still hot."
                        }],
                "ingredients": [
                    {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                    "rating": "B",
                    "bar-chart": 27.56
                    },
                    {
                    "id": "100100894",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": "",
                    "rating": "C",
                    "bar-chart": 75.56
                    }
                ]
            }
        }


### Create or update recipe [PUT]
Update or create a certain recipe with this id. The whole recipe resource with all ingredients must be provided again. (PUT overrides the existing resource).

+ Request (application/json)

        {   
            "recipe": {
               "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }],
                "author": "Eckart Witzigmann",
                "date": "2013-10-14",   
                "location": "Zürich Schweiz",
                "servings": 140,
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        },
                        {
                            "language": "en",
                            "value": "Bake the carrot cake in the oven and enjoy as still hot."
                        }],
                "ingredients": [
                    {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                    },
                    {
                    "id": "100100894",
                    "names":  [
                        {
                            "language": "de",
                            "value": "Zwiebeln"
                        }],
                    "amount": 78,
                    "unit": "gram",
                    "origin": "france",
                    "transport": "ground",
                    "production": "organic",
                    "processing": "",
                    "conservation": "dried",
                    "packaging": ""
                    }
                ]
            }
        }

+ Response 200 (application/json)

    + Headers
    
            Location: https://co2.eaternity.ch/api/kitchens/45674/recipes/d1ed2263-b1b2-4f50-9e9d-ba62cae81f29
            
    + Body
    
            {
                "recipe": {
                    "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                    "kitchen-id": "45674",
                    "co2-value": 765,
                    "info-text": "Two ingredient origins have been estimated.",
                    "eaternity-award": false,
                    "rating": "B"
                }   
            }

### Delete recipe [DELETE]
Deletes this recipe  from the server

+ Response 204

## Batch operations on Recipe Resource [/kitchens/{kitchen_id}/recipes/batch]

The `full-resource` url parameter is supported here as well. But just for the whole request itself and not on single recipes. The transient parameter can be set selectively on single recipes inside the batch.

The message in the response tells details about the failure.

### Create or update a batch of recipes [POST]
Create or update a batch of recipes at once. If a recipe id is provided, the recipe is either created with this id or the existing recipe is overwritten. The status code tells the difference.

The additional integer `request-id` field enables you to track back the recipes you sent in case you don't want to use your own id's. Either a request id or a recipe id is required.
The request-id differs from the recipe id and has just the lifetime of a single request (not stored on Eaternity's end).

+ Request (application/json)

        [ 
        { 
            "request-id": 1,
            "transient": false,
            "recipe": {
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }
                ],
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        }],
                "servings": 10,
                "ingredients": [
                    {  ...  }
                ]
          }
        }, 
        { 
            "request-id": 2,
            "transient": true,
            "recipe": {
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }
                ],             
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        }],
                "servings": 10,
                "ingredients": [
                    {  ...  }
                ]
          }
        }, 
        { 
            "request-id": 3,
            "transient": false,
            "recipe": {
                "id": "d1ed2263-b1b2-4f50-9e9d-ba62cae81f29",
                "titles": [
                    {
                        "language": "de",
                        "value": "Kürbisrisotto"
                    }
                ],              
                "instructions": [
                        {
                            "language": "de",
                            "value": "Den Karottenkuchen im Ofen backen und noch warm geniessen."
                        }],
                "servings": 10,
                "ingredients": [
                    {  ...  }
                ]
          }
        }
        ]

+ Response 200 (application/json)

        [ 
        {
            "statuscode": 200,
            "message": "",
            "request-id": 1,
            "recipe": {
                "id": "d1ed2263-b1b2-4f50-9e9d-1324529",
                "kitchen-id": "45674",
                "co2-value": 765,
                "eaternity-award": false,
                "rating": "B"
            }   
        }, 
        {
            "statuscode": 200,
            "message": "",
            "request-id": 2,
            "recipe": {
                "kitchen-id": "45674",
                "co2-value": 765,
                "eaternity-award": false,
                "rating": "B"
            }   
        }, 
        {
            "statuscode": 601,
            "message": "The ingredient 384767656 is not yet matched. Retry next day.",
            "request-id": 3
        }
        ]


### Delete a batch of recipes [DELETE]

+ Request (application/json)

        {
            "recipes": [ "3948756","3948757","3948757" ]
        }

+ Response 200 (application/json)

        [ 
        {
            "statuscode": 200,
            "message": "",
            "recipe-id": "3948756"
        }, 
        {
            "statuscode": 200,
            "message": "",
            "recipe-id": "3948757"
        }, 
        {
            "statuscode": 500,
            "message":  "Concurrency problem: You requested deleting this recipe several times in this batch.",
            "recipe-id": "3948757"
        }
        ]


# Group Kitchen Resources 
A kitchen is a place with cooking, food processing and storage devices where food is prepared, processed and stored. It has its own supply and purchase management and a well defined location. 

##Kitchen Properties
| Property | Type  | Description      | Required |
|:----------|:--------|:------------------|:----------|
|name |string |official name of the kitchen or factory |yes|
|location |string |place where the kitchen is located. Address or country (arbitrary format) |yes|
|email|string |email address of the kitchen where the CO2-reports are sent to |no|
|language|string | language of the CO2-reports for the kitchen |no| 
|id|string|the id of the kitchen. Either generated by Eaternity or supplied by the client through a PUT|no|

## Kitchen Collection [/kitchens]
### Create new kitchen [POST]

+ Request (application/json)

        {   "kitchen": {
                "name": "police canteen",
                "location": "zurich, switzerland",
                "email": "test@example.com",
                "language": "en"
            }
        }

+ Response 201 (application/json)

    + Headers
    
            Location: https://co2.eaternity.ch/api/kitchens/198764
            
    + Body
    
            {   "kitchen": {
                    "id": "198764",
                    "name": "police canteen",
                    "location": "zurich, switzerland",
                    "email": "test@example.com",
                    "language": "en"
                }
            }

### Get all kitchens of this client [GET]
A list of kitchen ids of this client (one API Key) is returned.

+ Response 200 (application/json)

        { 
            "kitchens": [ "45674","42344","42233","48855" ]
        }

## Kitchen [/kitchens/{kitchen_id}]
### Get a kitchen [GET]
Get the whole kitchen resource.

+ Response 200 (application/json)

        {   "kitchen": {
                "id": "198764",
                "name": "police canteen",
                "location": "zurich, switzerland",
                "email": "test@example.com",
                "language": "en"
            }
        }

### Create or update a kitchen [PUT]
Update or create the kitchen with the specific id

+ Request (application/json)

        {   "kitchen": {
                "name": "police canteen",
                "location": "zurich, switzerland",
                "email": "test@example.com",
                "language": "en"
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: https://co2.eaternity.ch/api/kitchens/198764

    + Body

            {   "kitchen": {
                    "id": "198764",
                    "name": "police canteen",
                    "location": "zurich, switzerland",
                    "email": "test@example.com",
                    "language": "en"
                }
            }
            
            
### Delete a kitchen [DELETE]
Deletes this kitchen from the server 

+ Response 204

# Group Supply Resources
Supplies are ordered from and delivered by a specific supplier in the supply chain. They are the data pool for all the Eaternity Reports. 

The `POST` and `PUT` method don't have a body because the purpose of this resource is to provide Eaternity with the data to generate the Reports.


## Supply Properties

| Property | Type  | Description      | Required |
|:----------|:--------|:------------------|:----------|
|supplier|string|specific supplier in the supply chain|no|
|supply-date|yyyy-mm-dd|the delivery date of the supply|yes|
|ingredients|list of ingredients|a list of all ingredient resources in this supply|yes|
|id|string|the id of the supply. Either generated by Eaternity or supplied by the client through a PUT|no|
|**Response**| | | |
|kitchen-id|string|the id of the kitchen the supply belongs to.||
|co2-value|float|the total CO₂-Value of the supply in [g CO₂e].||

## Supply Collection [/kitchens/{kitchen_id}/supplies/]
### Create a supply [POST]


+ Request (application/json)

        {   "supply": {
                "supplier": "Howeg",
                "supply-date": "2013-06-01",
                "ingredients": [
                {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                }
                ]
            }
        }

+ Response 200
    + Headers

            Location: https://co2.eaternity.ch/api/kitchens/1987647/supplies/d1ed2263

### Get all supplies in this kitchen [GET]
Get all supplies contained in this kitchen. A list of supply ids is returned.

+ Response 200 (application/json)

        { 
            "supplies": [ "d1ed2263","d1ed2264","d1ed2265","d1ed2268" ]
        }
        
        
## Supply [/kitchens/{kitchen_id}/supplies/{supply_id}]
### Get a supply [GET]

+ Response 200 (application/json)

        {   "supply": {
                "id": "d1ed2263",
                "kitchen-id": "293833",
                "co2-value": 77.3,
                "info-text": "Two ingredient origins have been estimated.",
                "supplier": "Howeg",
                "supply-date": "2013-06-01",
                "ingredients": [
                {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                }
                ]
        }

### Update or create a supply[PUT]
Update or create this supply with the specific id. The supply always needs to have an id, either a new one or an already existing one. 

+ Request (application/json)

        { "supply": {
                "supplier": "Howeg",
                "supply-date": "2013-06-01",
                "ingredients": [
                {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                }
                ]
            }
        }

+ Response 200
    + Headers

            Location: https://co2.eaternity.ch/api/kitchens/1987647/supplies/d1ed2263

### Delete a supply [DELETE]

+ Response 204

## Batch operations on supply resources [/kitchens/{kitchen_id}/supplies/batch]

### Create a batch of supplies [POST]
Creat or update a batch of supplies at once. If a supply id is provided, the supply is either created with this id or the existing supply is overwritten. The status code tells the difference.

The additional `request-id` field enables you to track back the supply you sent in case you don't want to use your own id. Either a request id or a recipe id is required.
The request-id differs from the supply id and has just the lifetime of a single request (not stored on Eaternity's end).

+ Request (application/json)

        [
        { 
            "request-id": 1,
            "supply": {
                "id": "d1ed2263",
                "supplier": "Howeg",
                "supply-date": "2013-06-01",
                "ingredients": [
                {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                }
                ]
            }
        },
        { 
            "request-id": 2,
            "supply": {
                "supplier": "Braschler",
                "supply-date": "2013-06-06",
                "ingredients": [
                {
                    "id": "100100191",
                     "names":  [
                        {
                            "language": "de",
                            "value": "Tomaten"
                        }],
                    "amount": 150,
                    "unit": "gram",
                    "origin": "spain",
                    "transport": "air",
                    "production": "greenhouse",
                    "processing": "raw",
                    "conservation": "fresh",
                    "packaging": "plastic"
                }
                ]
            }
        }
        ]

+ Response 200 (application/json)

        [ 
        {
            "statuscode": 200,
            "message": "",
            "request-id": 1,
            "supply-id": "d1ed2263"
        }, 
        {
            "statuscode": 500,
            "message": "Server Error. Just try again.",
            "request-id": 2
        }
        ]


### Delete a batch of supplies [DELETE]

+ Request (application/json)

        { 
            "supplies": [ "d1ed2263","d1ed2267" ]
        }

+ Response 200 (application/json)

        [ 
        {
            "statuscode": 200,
            "message": "",
            "supply-id": "d1ed2263"
        }, 
        {
            "statuscode": 200,
            "message": "",
            "supply-id": "d1ed2267"
        }
        ]